%YAML 1.2
---
name: Procfile
scope: source.procfile
version: 2

file_extensions:
  - Procfile

variables:
  # General
  s_sep: '[ \t]+' # actually s-separate-in-line
  c_indicator: '[-?:,\[\]{}#&*!|>''"%@`]'
  c_flow_indicator: '[\[\]{},]'
  ns_word_char: '[0-9A-Za-z\-]'
  ns_uri_char: '(?x: %[0-9A-Fa-f]{2} | [0-9A-Za-z\-#;/?:@&=+$,_.!~*''()\[\]] )'

  # Tag stuff
  c_tag_handle: (?:!(?:{{ns_word_char}}*!)?)
  ns_tag_char: '(?x: %[0-9A-Fa-f]{2} | [0-9A-Za-z\-#;/?:@&=+$_.~*''()] )' # ns-uri-char - "!" - c-flow-indicator
  ns_tag_prefix: |- # "!" ns-uri-char*  | ns-tag-char ns-uri-char*
    (?x:
        !              {{ns_uri_char}}*
      | (?![,!\[\]{}]) {{ns_uri_char}}+
    )
  c_ns_tag_property: |- # c-verbatim-tag | c-ns-shorthand-tag | c-non-specific-tag
    (?x:
        ! < {{ns_uri_char}}+ >
      | {{c_tag_handle}} {{ns_tag_char}}+
      | !
    )

  # Anchor & Alias
  ns_anchor_char: '[^\s\[\]/{/},]'
  ns_anchor_name: '{{ns_anchor_char}}+'

  # double-quoted scalar
  c_ns_esc_char: \\(?:[0abtnvfre "/\\N_Lp]|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|U[\dA-Fa-f]{8})

  # plain scalar begin and end patterns
  ns_plain_first_plain_in: |- # c=plain-in
    (?x:
        [^\s{{c_indicator}}]
      | [?:-] [^\s{{c_flow_indicator}}]
    )

  ns_plain_first_plain_out: |- # c=plain-out
    (?x:
        [^\s{{c_indicator}}]
      | [?:-] \S
    )

  _flow_scalar_end_plain_in: |- # kind of the negation of nb-ns-plain-in-line(c) c=plain-in
    (?x:
      (?=
          \s* $
        | \s+ \#
        | \s* : (\s|$)
        | \s* : {{c_flow_indicator}}
        | \s* {{c_flow_indicator}}
      )
    )

  _flow_scalar_end_plain_out: |- # kind of the negation of nb-ns-plain-in-line(c) c=plain-out
    (?x:
      (?=
          \s* $
        | \s+ \#
        | \s* : (\s|$)
      )
    )

  _flow_key_in_lookahead: |-
    (?x:
      (?=
        (
            {{ns_plain_first_plain_in}}
            ( [^\s:{{c_flow_indicator}}]
            | : [^\s{{c_flow_indicator}}]
            | \s+ (?![#\s])
            )*
          | \".*\" # simplified
          | \'.*\'
        )
        \s*
        :
        (\s|$)
      )
    )

  _flow_key_out_lookahead: |-
    (?x:
      (?=
        (
            {{ns_plain_first_plain_out}}
            ( [^\s:]
            | : \S
            | \s+ (?![#\s])
            )*
          | \".*\" # simplified
          | \'.*\'
        )
        \s*
        :
        (\s|$)
      )
    )

  # patterns for plain scalars of implicit different types
  # (for the Core Schema: http://www.yaml.org/spec/1.2/spec.html#schema/core/)

  # http://yaml.org/type/null.html
  _type_null: (?:null|Null|NULL|~)

  # http://yaml.org/type/bool.html
  _type_bool_11: |-
    (?x:
       y|Y|yes|Yes|YES|n|N|no|No|NO
      |true|True|TRUE|false|False|FALSE
      |on|On|ON|off|Off|OFF
    )
  # https://yaml.org/spec/1.2/spec.html#id2805071
  _type_bool_12: (?x:true | True | TRUE | false | False | FALSE)

  # http://yaml.org/type/int.html
  _type_int_binary: ([-+]?)(0b)([0-1_]+) # (base 2)
  _type_int_octal: ([-+]?)(0)([0-7_]+) # (base 8)
  _type_int_decimal: ([-+]?)(0|[1-9][0-9_]*) # (base 10)
  _type_int_hexadecimal: ([-+]?)(0x)([0-9a-fA-F_]+) # (base 16)
  _type_int_other: ([-+]?)([1-9][0-9_]*(?::[0-5]?[0-9])+) # (base 60)

  # http://yaml.org/type/float.html
  _type_float_decimal: |-
    (?x)
    ([-+]?) (
      (?:
        [0-9][0-9_]* (\.) [0-9_]*
      | (\.) _*[0-9][0-9_]*
      )
      (?:[eE][-+]?[0-9]+)?
    )
  _type_float_other: ([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+(\.)[0-9_]*) # (base 60)
  _type_float_infinity: ([-+])?(\.(?:inf|Inf|INF)) # (infinity)
  _type_float_nan: \.(?:nan|NaN|NAN) # (not a number)

  # http://yaml.org/type/timestamp.html
  _type_timestamp: |-
    (?x:
        \d{4} (-) \d{2} (-) \d{2}       # (y-m-d)
      | \d{4}                           # (year)
        (-) \d{1,2}                     # (month)
        (-) \d{1,2}                     # (day)
        (?: [Tt] | [ \t]+) \d{1,2}      # (hour)
        (:) \d{2}                       # (minute)
        (:) \d{2}                       # (second)
        (?: (\.)\d*)?                   # (fraction)
        [ \t]*
        (?:
          Z | [-+] \d{1,2} (?: (:)\d{1,2})?
        )?                              # (time zone)
    )

  # http://yaml.org/type/value.html
  _type_value: '='

  # http://yaml.org/type/merge.html
  _type_merge: '<<'

##############################################################################

contexts:
  prototype:
    - include: comment

  main:
    - include: node

  node:
    - include: block-node-11

  flow-node-11:
    # http://yaml.org/spec/1.2/spec.html#style/flow/
    # ns-flow-yaml-node(n,c)
    - include: flow-alias
    - include: flow-collection
    - include: flow-scalar-11

  flow-node-12:
    # http://yaml.org/spec/1.2/spec.html#style/flow/
    # ns-flow-yaml-node(n,c)
    - include: flow-alias
    - include: flow-collection
    - include: flow-scalar-12

  flow-scalar-11:
    # http://yaml.org/spec/1.2/spec.html#style/flow/scalar
    - include: flow-scalar-double-quoted
    - include: flow-scalar-single-quoted
    - include: flow-scalar-plain-in-11

  flow-scalar-12:
    # http://yaml.org/spec/1.2/spec.html#style/flow/scalar
    - include: flow-scalar-double-quoted
    - include: flow-scalar-single-quoted
    - include: flow-scalar-plain-in-12

  flow-scalar-out-12:
    # for block keys
    - include: flow-scalar-double-quoted
    - include: flow-scalar-single-quoted
    - include: flow-scalar-plain-out-12

  flow-collection:
    # http://yaml.org/spec/1.2/spec.html#style/flow/collection
    - include: flow-sequence
    - include: flow-mapping

  block-node-11:
    # http://yaml.org/spec/1.2/spec.html#style/block/
    - include: block-scalar
    - include: block-collection
    - include: flow-scalar-plain-out-11  # needs higher priority than flow-node-11, which includes flow-scalar-plain-in
    - include: flow-node-11

  block-node-12:
    # http://yaml.org/spec/1.2/spec.html#style/block/
    - include: block-scalar
    - include: block-collection
    - include: flow-scalar-plain-out-12
    - include: flow-node-12  # the -12 variant should not make a difference

  block-collection:
    # http://yaml.org/spec/1.2/spec.html#style/block/collection
    - include: block-mapping


######################################

  property:
    # http://yaml.org/spec/1.2/spec.html#node/property/
    - match: (?=!|&)
      push: property-body

  property-body:
    - meta_scope: meta.property.procfile
    # &Anchor
    # http://yaml.org/spec/1.2/spec.html#&%20anchor//
    - match: (&)({{ns_anchor_name}})(\S+)?
      captures:
        1: keyword.control.property.anchor.procfile punctuation.definition.anchor.procfile
        2: entity.name.other.anchor.procfile
        3: invalid.illegal.character.anchor.procfile
      pop: true
    # !Tag Handle
    # http://yaml.org/spec/1.2/spec.html#tag/property/
    - match: '{{c_ns_tag_property}}(?=\ |\t|$)'
      scope: storage.type.tag-handle.procfile
      pop: true
    - match: \S+
      scope: invalid.illegal.tag-handle.procfile
      pop: true

  flow-alias:
    # http://yaml.org/spec/1.2/spec.html#alias//
    - match: (\*)({{ns_anchor_name}})([^\s\]},]\S*)?
      captures:
        1: keyword.control.flow.alias.procfile punctuation.definition.alias.procfile
        2: variable.other.alias.procfile
        3: invalid.illegal.character.anchor.procfile

  flow-scalar-double-quoted:
    # http://yaml.org/spec/1.2/spec.html#style/flow/double-quoted
    # c-double-quoted(n,c)
    - match: \"
      scope: punctuation.definition.string.begin.procfile
      push: flow-scalar-double-quoted-body

  flow-scalar-double-quoted-body:
    # TODO consider scoping meaningful trailing whitespace for color
    # schemes with background color definitions.
    - meta_include_prototype: false
    - meta_scope: meta.string.procfile string.quoted.double.procfile
    - match: '{{c_ns_esc_char}}'
      scope: constant.character.escape.double-quoted.procfile
    - match: \\\n
      scope: constant.character.escape.double-quoted.newline.procfile
    - match: \"
      scope: punctuation.definition.string.end.procfile
      pop: true

  flow-scalar-single-quoted:
    # http://yaml.org/spec/1.2/spec.html#style/flow/single-quoted
    # c-single-quoted(n,c)
    - match: \'
      scope: punctuation.definition.string.begin.procfile
      push: flow-scalar-single-quoted-body

  flow-scalar-single-quoted-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.procfile string.quoted.single.procfile
    - match: \'\'
      scope: constant.character.escape.single-quoted.procfile
    - match: \'
      scope: punctuation.definition.string.end.procfile
      pop: true

  flow-scalar-plain-in-implicit-type-11:
    - match: '{{_type_bool_11}}{{_flow_scalar_end_plain_in}}'
      scope: constant.language.boolean.procfile
    - include: flow-scalar-plain-in-implicit-type-common

  flow-scalar-plain-in-implicit-type-12:
    # Less aggressive variant based on the YAML 1.2 core schema
    - match: '{{_type_bool_12}}{{_flow_scalar_end_plain_in}}'
      scope: constant.language.boolean.procfile
    - include: flow-scalar-plain-in-implicit-type-common

  flow-scalar-plain-in-implicit-type-common:
    - match: '{{_type_null}}{{_flow_scalar_end_plain_in}}'
      scope: constant.language.null.procfile
    - match: '{{_type_value}}{{_flow_scalar_end_plain_in}}'
      scope: constant.language.value.procfile
    - match: '{{_type_merge}}{{_flow_scalar_end_plain_in}}'
      scope: constant.language.merge.procfile
    # integers
    - match: '{{_type_int_binary}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.integer.binary.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.base.procfile
        3: constant.numeric.value.procfile
    - match: '{{_type_int_octal}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.integer.octal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.base.procfile
        3: constant.numeric.value.procfile
    - match: '{{_type_int_decimal}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.integer.decimal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
    - match: '{{_type_int_hexadecimal}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.integer.hexadecimal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.base.procfile
        3: constant.numeric.value.procfile
    - match: '{{_type_int_other}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.integer.other.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
    # floats
    - match: '{{_type_float_decimal}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.float.decimal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
        3: punctuation.separator.decimal.procfile
        4: punctuation.separator.decimal.procfile
    - match: '{{_type_float_other}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.float.other.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
        3: punctuation.separator.decimal.procfile
    - match: '{{_type_float_infinity}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.float.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.language.infinity.procfile
    - match: '{{_type_float_nan}}{{_flow_scalar_end_plain_in}}'
      scope: meta.number.procfile constant.language.nan.procfile
    # timestamp
    - match: '{{_type_timestamp}}{{_flow_scalar_end_plain_in}}'
      scope: constant.other.timestamp.procfile
      captures:
        1: punctuation.separator.date.procfile
        2: punctuation.separator.date.procfile
        3: punctuation.separator.date.procfile
        4: punctuation.separator.date.procfile
        5: punctuation.separator.time.procfile
        6: punctuation.separator.time.procfile
        7: punctuation.separator.time.procfile
        8: punctuation.separator.time.procfile

  flow-scalar-plain-in-11:
    # http://yaml.org/spec/1.2/spec.html#style/flow/plain
    # ns-plain(n,c) (c=flow-in, c=flow-key)
    - include: flow-scalar-plain-in-implicit-type-11
    - include: flow-scalar-plain-in-common

  flow-scalar-plain-in-12:
    # http://yaml.org/spec/1.2/spec.html#style/flow/plain
    # ns-plain(n,c) (c=flow-in, c=flow-key)
    - include: flow-scalar-plain-in-implicit-type-12
    - include: flow-scalar-plain-in-common

  flow-scalar-plain-in-common:
    - match: (?={{ns_plain_first_plain_in}})
      push: flow-scalar-plain-in-body

  flow-scalar-plain-in-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.procfile string.unquoted.plain.in.procfile
    - match: '{{_flow_scalar_end_plain_in}}'
      pop: true

  flow-scalar-plain-out-implicit-type-11:
    - match: '{{_type_bool_11}}{{_flow_scalar_end_plain_out}}'
      scope: constant.language.boolean.procfile
    - include: flow-scalar-plain-out-implicit-type-common

  flow-scalar-plain-out-implicit-type-12:
    # Less aggressive variant based on the YAML 1.2 core schema
    - match: '{{_type_bool_12}}{{_flow_scalar_end_plain_out}}'
      scope: constant.language.boolean.procfile
    - include: flow-scalar-plain-out-implicit-type-common

  flow-scalar-plain-out-implicit-type-common:
    - match: '{{_type_null}}{{_flow_scalar_end_plain_out}}'
      scope: constant.language.null.procfile
    - match: '{{_type_value}}{{_flow_scalar_end_plain_out}}'
      scope: constant.language.value.procfile
    - match: '{{_type_merge}}{{_flow_scalar_end_plain_out}}'
      scope: constant.language.merge.procfile
    # integers
    - match: '{{_type_int_binary}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.integer.binary.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.base.procfile
        3: constant.numeric.value.procfile
    - match: '{{_type_int_octal}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.integer.octal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.base.procfile
        3: constant.numeric.value.procfile
    - match: '{{_type_int_decimal}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.integer.decimal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
    - match: '{{_type_int_hexadecimal}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.integer.hexadecimal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.base.procfile
        3: constant.numeric.value.procfile
    - match: '{{_type_int_other}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.integer.other.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
    # floats
    - match: '{{_type_float_decimal}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.float.decimal.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
        3: punctuation.separator.decimal.procfile
        4: punctuation.separator.decimal.procfile
    - match: '{{_type_float_other}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.float.other.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.numeric.value.procfile
        3: punctuation.separator.decimal.procfile
    - match: '{{_type_float_infinity}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.float.procfile
      captures:
        1: keyword.operator.arithmetic.procfile
        2: constant.language.infinity.procfile
    - match: '{{_type_float_nan}}{{_flow_scalar_end_plain_out}}'
      scope: meta.number.procfile constant.language.nan.procfile
    # timestamp
    - match: '{{_type_timestamp}}{{_flow_scalar_end_plain_out}}'
      scope: constant.other.timestamp.procfile
      captures:
        1: punctuation.separator.date.procfile
        2: punctuation.separator.date.procfile
        3: punctuation.separator.date.procfile
        4: punctuation.separator.date.procfile
        5: punctuation.separator.time.procfile
        6: punctuation.separator.time.procfile
        7: punctuation.separator.time.procfile
        8: punctuation.separator.time.procfile

  flow-scalar-plain-out-11:
    # http://yaml.org/spec/1.2/spec.html#style/flow/plain
    # ns-plain(n,c) (c=flow-out, c=block-key)
    - include: flow-scalar-plain-out-implicit-type-11
    - include: flow-scalar-plain-out-common

  flow-scalar-plain-out-12:
    # http://yaml.org/spec/1.2/spec.html#style/flow/plain
    # ns-plain(n,c) (c=flow-out, c=block-key)
    - include: flow-scalar-plain-out-implicit-type-12
    - include: flow-scalar-plain-out-common

  flow-scalar-plain-out-common:
    - match: (?={{ns_plain_first_plain_out}})
      push: flow-scalar-plain-out-body

  flow-scalar-plain-out-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.procfile string.unquoted.plain.out.procfile
    - match: '{{_flow_scalar_end_plain_out}}'
      pop: true

  flow-sequence:
    # http://yaml.org/spec/1.2/spec.html#style/flow/sequence
    # c-flow-sequence(n,c)
    - match: \[
      scope: punctuation.definition.sequence.begin.procfile
      push: flow-sequence-body

  flow-sequence-body:
    - meta_scope: meta.sequence.flow.procfile
    - match: \]
      scope: punctuation.definition.sequence.end.procfile
      pop: true
    - match: ','
      scope: punctuation.separator.sequence.procfile
    - include: flow-pair-no-clear
    - include: flow-node-11

  flow-mapping:
    - match: \{
      scope: punctuation.definition.mapping.begin.procfile
      push: flow-mapping-body

  flow-mapping-body:
    - meta_scope: meta.mapping.procfile
    - match: \}
      scope: punctuation.definition.mapping.end.procfile
      pop: true
    - match: ','
      scope: punctuation.separator.sequence.procfile
    - include: flow-pair
    - include: flow-node-11  # for sets

  flow-pair:
    - match: \?
      scope: meta.mapping.key.procfile punctuation.definition.key.begin.procfile
      push:
        - flow-pair-clear-1
        - flow-pair-key
    # Attempt to match plain-in scalars followed by a colon
    - match: '{{_flow_key_in_lookahead}}'
      push:
        - flow-pair-clear-1
        - flow-pair-key
    - match: :(?=\s|$|{{c_flow_indicator}}) # Empty mapping keys allowed
      scope: meta.mapping.procfile punctuation.separator.key-value.mapping.procfile
      push:
        - flow-pair-clear-1
        - flow-pair-value

  # Variant without clearing the parent scope for pairs in a sequence
  flow-pair-no-clear:
    - match: \?
      scope: meta.mapping.key.procfile punctuation.definition.key.begin.procfile
      push: flow-pair-key
    - match: '{{_flow_key_in_lookahead}}'
      push: flow-pair-key
    - match: :(?=\s|$|{{c_flow_indicator}})
      scope: meta.mapping.procfile punctuation.separator.key-value.mapping.procfile
      push: flow-pair-value

  flow-pair-key:
    - meta_content_scope: meta.mapping.key.procfile
    - match: :(?=\s|$|{{c_flow_indicator}})
      scope: meta.mapping.procfile punctuation.separator.key-value.mapping.procfile
      set: flow-pair-value
    - include: flow-pair-end  # Empty mapping keys & values are allowed
    - include: flow-node-12

  flow-pair-value:
    - meta_content_scope: meta.mapping.value.procfile
    - include: flow-pair-end
    - include: flow-node-11

  flow-pair-clear-1:
    - meta_include_prototype: false
    - clear_scopes: 1
    - match: ''
      pop: true

  flow-pair-end:
    - match: (?=[},\]])
      pop: true

  block-scalar:
    # http://www.yaml.org/spec/1.2/spec.html#style/block/scalar
    # c-l+literal(n) | c-l+folded(n)
    - match: (?:(\|)|(>))(?:([1-9])([-+])|([-+])?([1-9])?)  # c-b-block-header(m,t)
      captures:
        1: keyword.control.flow.block-scalar.literal.procfile
        2: keyword.control.flow.block-scalar.folded.procfile
        3: constant.numeric.indentation-indicator.procfile
        4: storage.modifier.chomping-indicator.procfile
        5: storage.modifier.chomping-indicator.procfile
        6: constant.numeric.indentation-indicator.procfile
      push: block-scalar-begin

  block-scalar-begin:
    - meta_include_prototype: false
    - match: ^([ ]+)(?! )  # match first non-empty line to determine indentation level
      # note that we do not check if indentation is enough
      set: block-scalar-body
    - match: ^(?=\S)  # the block is empty
      pop: true
    - include: comment  # include comments but not properties
    - match: .+
      scope: invalid.illegal.expected-comment-or-newline.procfile

  block-scalar-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.procfile string.unquoted.block.procfile
    - match: ^(?!\1|\s*$)
      pop: true

  block-mapping:
    # http://www.yaml.org/spec/1.2/spec.html#style/block/mapping
    # l+block-mapping(n)
    - include: block-pair

  block-pair:
    - match: ( *)(\?)(?=\s)
      captures:
        2: meta.mapping.procfile punctuation.definition.key-value.begin.procfile
      push: block-key-explicit
    # Attempt to match plain-out scalars and highlight as "meta.mapping.key",
    # if followed by a colon
    - match: '{{_flow_key_out_lookahead}}'
      push: block-key-implicit
    - match: :(?=\s)
      scope: meta.mapping.procfile punctuation.separator.key-value.mapping.procfile

  block-key-explicit:
    - meta_content_scope: meta.mapping.key.procfile
    # the colon *must* be on a new line
    - match: ^ *(:)
      scope: meta.mapping.procfile
      captures:
        1: punctuation.separator.key-value.mapping.procfile
      pop: true
    # multi-line keys are indented by at least one more space than `?`
    - match: ^(?!\1 +\S|\s*$)
      pop: true
    - include: block-node-12

  block-key-implicit:
    - meta_content_scope: meta.mapping.key.procfile
    - match: :(?=\s)
      scope: meta.mapping.procfile punctuation.separator.key-value.mapping.procfile
      pop: true
    - include: flow-scalar-out-12

  comment:
    # http://www.yaml.org/spec/1.2/spec.html#comment//
    - match: |- # l-comment
        (?x)
        (?: ^ [ \t]* | [ \t]+ )
        (?=\#)
      push: comment-begin

  comment-begin:
    - meta_include_prototype: false
    - match: \#
      scope: punctuation.definition.comment.line.number-sign.procfile
      set: comment-body

  comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.number-sign.procfile
    - match: \n
      pop: true
