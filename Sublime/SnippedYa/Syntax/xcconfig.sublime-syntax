%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - xcconfig
scope: source.xcconfig

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings
    - include: variables

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(include)\b'
      scope: keyword.control.xcconfig

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.xcconfig

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.xcconfig
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.xcconfig
    - match: '\.'
      scope: constant.character.escape.xcconfig
    - match: '"'
      scope: punctuation.definition.string.end.xcconfig
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: "//"
      scope: punctuation.definition.comment.xcconfig
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.xcconfig
        - match: $\n?
          pop: true

  variables:
    # Start of line, word chars until word boundary
    - match: '^\w+\b'
      scope: variable.other.xcconfig
      push:
        - match: '= *\b'
          set: equals

  equals:
    - match: " *"
      set: value

  value:
    - meta_scope: string.unquoted.xcconfig
    - match: '\$\('
      push:
        - meta_scope: variable.language.special
        - match: '\)'
          pop: true
    - match: '\n'
      pop: true

  inside_expansion:
    - meta_include_prototype: false
