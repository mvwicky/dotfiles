#compdef wapm autoload -U is-at-least _wapm() { typeset -A opt_args typeset -a _arguments_options local ret=1 if is-at-least 5.2; then _arguments_options=(-s -S -C) else _arguments_options=(-s -C) fi local context curcontext="$curcontext" state line _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ":: :_wapm_commands" \ "*::: :->wapm-cli" \ && ret=0 case $state in (wapm-cli) words=($line[1] "${words[@]}") (( CURRENT += 1 )) curcontext="${curcontext%:*:*}:wapm-command-$line[1]:" case $line[1] in (whoami) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (login) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (logout) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (config) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ":: :_wapm__config_commands" \ "*::: :->config" \ && ret=0 case $state in (config) words=($line[1] "${words[@]}") (( CURRENT += 1 )) curcontext="${curcontext%:*:*}:wapm-config-command-$line[1]:" case $line[1] in (set) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':key:_files' \ ':value:_files' \ && ret=0 ;; (get) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':key:_files' \ && ret=0 ;; (help) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; esac ;; esac ;; (install) _arguments "${_arguments_options[@]}" \ '-g[Install the package(s) globally]' \ '--global[Install the package(s) globally]' \ '--force-yes[Agree to all prompts. Useful for non-interactive uses. (WARNING: this may cause undesired behavior)]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ '::packages:_files' \ && ret=0 ;; (publish) _arguments "${_arguments_options[@]}" \ '--dry-run[Run the publish logic without sending anything to the registry server]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (run) _arguments "${_arguments_options[@]}" \ '*--dir=[WASI pre-opened directory]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':command -- Command name:_files' \ '::args -- Application arguments:_files' \ && ret=0 ;; (search) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':query:_files' \ && ret=0 ;; (validate) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':package -- Directory or tar file to validate:_files' \ && ret=0 ;; (completions) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':SHELL -- The shell to generate the completions script for:_files' \ && ret=0 ;; (init) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':package_name -- The name of the wapm package:_files' \ && ret=0 ;; (list) _arguments "${_arguments_options[@]}" \ '-g[List just the globally installed packages]' \ '--global[List just the globally installed packages]' \ '-a[List both locally and globally installed packages]' \ '--all[List both locally and globally installed packages]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (keys) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ":: :_wapm__keys_commands" \ "*::: :->keys" \ && ret=0 case $state in (keys) words=($line[1] "${words[@]}") (( CURRENT += 1 )) curcontext="${curcontext%:*:*}:wapm-keys-command-$line[1]:" case $line[1] in (list) _arguments "${_arguments_options[@]}" \ '-a[Show keys downloaded from WAPM too]' \ '--all[Show keys downloaded from WAPM too]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (register) _arguments "${_arguments_options[@]}" \ '--public=[The location of the public key to add]' \ '--private=[The location of the private key to add]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (import) _arguments "${_arguments_options[@]}" \ '--user-name=[]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':public_key_value:_files' \ && ret=0 ;; (delete) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':public_key_id -- The identifier of the public key:_files' \ && ret=0 ;; (generate) _arguments "${_arguments_options[@]}" \ '-f[Overwrite keys if they exist]' \ '--force[Overwrite keys if they exist]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':key_path -- Where the keys should be stored:_files' \ && ret=0 ;; (help) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; esac ;; esac ;; (uninstall) _arguments "${_arguments_options[@]}" \ '-g[Uninstall the package(s) globally]' \ '--global[Uninstall the package(s) globally]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ ':package:_files' \ && ret=0 ;; (bin) _arguments "${_arguments_options[@]}" \ '-g[Get the global .bin dir]' \ '--global[Get the global .bin dir]' \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; (help) _arguments "${_arguments_options[@]}" \ '-h[Prints help information]' \ '--help[Prints help information]' \ '-V[Prints version information]' \ '--version[Prints version information]' \ && ret=0 ;; esac ;; esac } (( $+functions[_wapm_commands] )) || _wapm_commands() { local commands; commands=( "whoami:Prints the current user (if authed) in the stdout" \ "login:Logins into wapm, saving the token locally for future commands" \ "logout:Remove the token for the registry" \ "config:Config related subcommands" \ "install:Install a package" \ "publish:Publish a package" \ "run:Run a command from the package or one of the dependencies" \ "search:Search packages" \ "validate:Check if a directory or tar.gz is a valid wapm package" \ "completions:Generate autocompletion scripts for your shell" \ "init:Set up current directory for use with wapm" \ "list:List the currently installed packages and their commands" \ "keys:Manage minisign keys for verifying packages" \ "uninstall:Uninstall a package" \ "bin:Get the .bin dir path" \ "help:Prints this message or the help of the given subcommand(s)" \ ) _describe -t commands 'wapm commands' commands "$@" } (( $+functions[_wapm__bin_commands] )) || _wapm__bin_commands() { local commands; commands=( ) _describe -t commands 'wapm bin commands' commands "$@" } (( $+functions[_wapm__completions_commands] )) || _wapm__completions_commands() { local commands; commands=( ) _describe -t commands 'wapm completions commands' commands "$@" } (( $+functions[_wapm__config_commands] )) || _wapm__config_commands() { local commands; commands=( "set:Sets a key" \ "get:Gets a key" \ "help:Prints this message or the help of the given subcommand(s)" \ ) _describe -t commands 'wapm config commands' commands "$@" } (( $+functions[_wapm__keys__delete_commands] )) || _wapm__keys__delete_commands() { local commands; commands=( ) _describe -t commands 'wapm keys delete commands' commands "$@" } (( $+functions[_wapm__keys__generate_commands] )) || _wapm__keys__generate_commands() { local commands; commands=( ) _describe -t commands 'wapm keys generate commands' commands "$@" } (( $+functions[_wapm__config__get_commands] )) || _wapm__config__get_commands() { local commands; commands=( ) _describe -t commands 'wapm config get commands' commands "$@" } (( $+functions[_wapm__config__help_commands] )) || _wapm__config__help_commands() { local commands; commands=( ) _describe -t commands 'wapm config help commands' commands "$@" } (( $+functions[_wapm__help_commands] )) || _wapm__help_commands() { local commands; commands=( ) _describe -t commands 'wapm help commands' commands "$@" } (( $+functions[_wapm__keys__help_commands] )) || _wapm__keys__help_commands() { local commands; commands=( ) _describe -t commands 'wapm keys help commands' commands "$@" } (( $+functions[_wapm__keys__import_commands] )) || _wapm__keys__import_commands() { local commands; commands=( ) _describe -t commands 'wapm keys import commands' commands "$@" } (( $+functions[_wapm__init_commands] )) || _wapm__init_commands() { local commands; commands=( ) _describe -t commands 'wapm init commands' commands "$@" } (( $+functions[_wapm__install_commands] )) || _wapm__install_commands() { local commands; commands=( ) _describe -t commands 'wapm install commands' commands "$@" } (( $+functions[_wapm__keys_commands] )) || _wapm__keys_commands() { local commands; commands=( "list:List keys registered with wapm" \ "register:Register a personal key pair with wapm" \ "import:Import a public key from somewhere" \ "delete:Delete a keypair from wapm" \ "generate:Generate a keypair for use with package signing" \ "help:Prints this message or the help of the given subcommand(s)" \ ) _describe -t commands 'wapm keys commands' commands "$@" } (( $+functions[_wapm__keys__list_commands] )) || _wapm__keys__list_commands() { local commands; commands=( ) _describe -t commands 'wapm keys list commands' commands "$@" } (( $+functions[_wapm__list_commands] )) || _wapm__list_commands() { local commands; commands=( ) _describe -t commands 'wapm list commands' commands "$@" } (( $+functions[_wapm__login_commands] )) || _wapm__login_commands() { local commands; commands=( ) _describe -t commands 'wapm login commands' commands "$@" } (( $+functions[_wapm__logout_commands] )) || _wapm__logout_commands() { local commands; commands=( ) _describe -t commands 'wapm logout commands' commands "$@" } (( $+functions[_wapm__publish_commands] )) || _wapm__publish_commands() { local commands; commands=( ) _describe -t commands 'wapm publish commands' commands "$@" } (( $+functions[_wapm__keys__register_commands] )) || _wapm__keys__register_commands() { local commands; commands=( ) _describe -t commands 'wapm keys register commands' commands "$@" } (( $+functions[_wapm__run_commands] )) || _wapm__run_commands() { local commands; commands=( ) _describe -t commands 'wapm run commands' commands "$@" } (( $+functions[_wapm__search_commands] )) || _wapm__search_commands() { local commands; commands=( ) _describe -t commands 'wapm search commands' commands "$@" } (( $+functions[_wapm__config__set_commands] )) || _wapm__config__set_commands() { local commands; commands=( ) _describe -t commands 'wapm config set commands' commands "$@" } (( $+functions[_wapm__uninstall_commands] )) || _wapm__uninstall_commands() { local commands; commands=( ) _describe -t commands 'wapm uninstall commands' commands "$@" } (( $+functions[_wapm__validate_commands] )) || _wapm__validate_commands() { local commands; commands=( ) _describe -t commands 'wapm validate commands' commands "$@" } (( $+functions[_wapm__whoami_commands] )) || _wapm__whoami_commands() { local commands; commands=( ) _describe -t commands 'wapm whoami commands' commands "$@" }
